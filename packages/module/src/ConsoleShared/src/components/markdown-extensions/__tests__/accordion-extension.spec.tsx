// Generated by Cursor
// AI-assisted implementation with human review and modifications
import { renderHook } from '@testing-library/react';
import useAccordionShowdownExtension from '../accordion-extension';
import { ACCORDION_MARKDOWN_BUTTON_ID, ACCORDION_MARKDOWN_CONTENT_ID } from '../const';
import { marked } from 'marked';

// Mock marked
jest.mock('marked', () => ({
  marked: {
    parseInline: jest.fn((text) => `<em>${text}</em>`),
  },
}));

// Mock DOMPurify
jest.mock('dompurify', () => ({
  sanitize: jest.fn((html) => html),
}));

describe('useAccordionShowdownExtension', () => {
  beforeEach(() => {
    jest.clearAllMocks();
  });

  it('should return a showdown extension with correct properties', () => {
    const { result } = renderHook(() => useAccordionShowdownExtension());
    const extension = result.current;

    expect(extension.type).toBe('lang');
    expect(extension.regex).toEqual(/\[(.+)]{{(accordion) (&quot;(.*?)&quot;)}}/g);
    expect(typeof extension.replace).toBe('function');
  });

  it('should match accordion syntax with HTML-encoded quotes', () => {
    const { result } = renderHook(() => useAccordionShowdownExtension());
    const { regex } = result.current;

    const testText = '[Some content]{{accordion &quot;My Title&quot;}}';
    const matches = regex.exec(testText);

    expect(matches).not.toBeNull();
    if (matches) {
      expect(matches[1]).toBe('Some content');
      expect(matches[2]).toBe('accordion');
      expect(matches[4]).toBe('My Title');
    }
  });

  it('should not match accordion syntax with regular quotes', () => {
    const { result } = renderHook(() => useAccordionShowdownExtension());
    const { regex } = result.current;

    const testText = '[Some content]{{accordion "My Title"}}';
    expect(testText.match(regex)).toBeNull();
  });

  it('should generate correct accordion HTML structure', () => {
    const { result } = renderHook(() => useAccordionShowdownExtension());
    const { replace } = result.current;

    const html = replace(
      '[Test content]{{accordion &quot;Test Title&quot;}}',
      'Test content',
      'accordion',
      '&quot;Test Title&quot;',
      'Test Title',
    );

    expect(html).toContain('pf-v6-c-accordion');
    expect(html).toContain('pf-v6-c-accordion__toggle');
    expect(html).toContain(`${ACCORDION_MARKDOWN_BUTTON_ID}-Test-Title`);
    expect(html).toContain(`${ACCORDION_MARKDOWN_CONTENT_ID}-Test-Title`);
    expect(html).toContain('Test Title');
  });

  it('should process content through marked and sanitize HTML', () => {
    const { result } = renderHook(() => useAccordionShowdownExtension());
    const { replace } = result.current;

    replace(
      '[**Bold text**]{{accordion &quot;Title&quot;}}',
      '**Bold text**',
      'accordion',
      '&quot;Title&quot;',
      'Title',
    );

    expect(marked.parseInline).toHaveBeenCalledWith('**Bold text**');
  });

  it('should handle titles with spaces in IDs', () => {
    const { result } = renderHook(() => useAccordionShowdownExtension());
    const { replace } = result.current;

    const html = replace(
      '[Content]{{accordion &quot;My Test Title&quot;}}',
      'Content',
      'accordion',
      '&quot;My Test Title&quot;',
      'My Test Title',
    );

    expect(html).toContain(`${ACCORDION_MARKDOWN_BUTTON_ID}-My-Test-Title`);
  });
});
